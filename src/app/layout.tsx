"use client";
import { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { usePathname } from "next/navigation";
import React, { useEffect, useState } from "react";
import "./globals.css";
import BottomNavigation from "../components/BottomNavigation";
import { Toaster } from "sonner";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});


const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  const [userName, setUserName] = useState<string | null>(null); // State to hold the fetched username
  const pathname = usePathname();
  const [clientPath, setClientPath] = useState<string | null>(null);

  const allowedRoutes = ["/", "/" + userName, "/home", "/post", "/rapid", "/search"];

  useEffect(() => {
    const handleUnload = () => {
      localStorage.removeItem("NPS"); // NOTIFICATION PERMISSION SKIPPED
      localStorage.removeItem("LPS"); // LOCATION PERMISSION SKIPPED
    };

    window.addEventListener("beforeunload", handleUnload);

    return () => {
      window.removeEventListener("beforeunload", handleUnload);
    };
  }, []);

  useEffect(() => {
    const fetchUserName = async () => {
      try {
        const response = await fetch("/api/userProfile/username"); // Adjust the endpoint as needed
        const data = await response.json();

        if (data.username) {
          setUserName(data.username);
        } else {
          console.error("Username not found.");
        }
      } catch (error) {
        console.error("Failed to fetch username:", error);
      }
    };

    fetchUserName();
  }, []);

  useEffect(() => {
    setClientPath(pathname);
  }, [pathname]);

  const showBottomNav = clientPath !== null && allowedRoutes.includes(clientPath);
  const showMain = !showBottomNav;

  return (
    <html lang="en">
      <head>
        <title>{String(metadata.title ?? "Default Title")}</title>
        <meta name="description" content={String(metadata.description ?? "Default Description")} />
      </head>
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>


        {showMain && <main className="flex-grow">{children}</main>}

        <Toaster richColors position="top-center" expand={false} closeButton />
        {showBottomNav && <BottomNavigation />}

      </body>
    </html>
  );
}
